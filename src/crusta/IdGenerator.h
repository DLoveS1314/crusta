#ifndef _IdGenerator_H_
#define _IdGenerator_H_


#include <crustacore/basics.h>


namespace crusta {


template <typename UnsignedInteger>
class IdGeneratorTemplate
{
public:
    typedef UnsignedInteger Id;

    IdGeneratorTemplate(UnsignedInteger numberOfIds) :
        max(numberOfIds-1), invalid(numberOfIds), sequence(UnsignedInteger(0))
    {
    }

    UnsignedInteger getMax()
    {
        return max;
    }
    UnsignedInteger getInvalid()
    {
        return invalid;
    }

    /** grab an unused id from the generator */
    UnsignedInteger grab()
    {
        UnsignedInteger ret = invalid;
        if (!freeIds.empty())
        {
            ret = freeIds.back();
            freeIds.pop_back();
        }
        else if (sequence<invalid)
        {
            ret = sequence;
            ++sequence;
        }
        return ret;
    }

    /** release an id back to the pool of available ones.
        \note there are no checks to verify that the returned id is valid and
              was generated by the generator */
    void release(const UnsignedInteger id)
    {
        freeIds.push_back(id);
    }

protected:
    const UnsignedInteger max;
    const UnsignedInteger invalid;

    UnsignedInteger              sequence;
    std::vector<UnsignedInteger> freeIds;
};


typedef IdGeneratorTemplate<uint32_t> IdGenerator32;
typedef IdGeneratorTemplate<uint64_t> IdGenerator64;


} //namespace crusta


#endif //_IdGenerator_H_
